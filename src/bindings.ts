/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function setInterfaceConfiguration(cryptographicInterface: CryptographicInterface, tool: string | null, configuration: FrontEndInterfaceConfiguration) {
    return invoke()<null>("set_interface_configuration", { cryptographicInterface,tool,configuration })
}

export function getInterfaceConfiguration(cryptographicInterface: CryptographicInterface, tool: string | null) {
    return invoke()<FrontEndInterfaceConfiguration | null>("get_interface_configuration", { cryptographicInterface,tool })
}

export function removeInterfaceConfiguration(cryptographicInterface: CryptographicInterface, tool: string | null) {
    return invoke()<null>("remove_interface_configuration", { cryptographicInterface,tool })
}

export function getGroups(communicatorUrl: string) {
    return invoke()<Group[]>("get_groups", { communicatorUrl })
}

export function setCommunicatorCertificatePath(certificatePath: string, communicatorUrl: string) {
    return invoke()<null>("set_communicator_certificate_path", { certificatePath,communicatorUrl })
}

export function spawnInterfaceProcess(creatableInterface: CreatableInterface) {
    return invoke()<null>("spawn_interface_process", { creatableInterface })
}

export function killInterfaceProcess(creatableInterface: CreatableInterface) {
    return invoke()<null>("kill_interface_process", { creatableInterface })
}

export function isCertificatePresent(communicatorUrl: string) {
    return invoke()<boolean>("is_certificate_present", { communicatorUrl })
}

export function getConfiguredTools(cryptographicInterface: CryptographicInterface) {
    return invoke()<(string | null)[]>("get_configured_tools", { cryptographicInterface })
}

export type FrontEndInterfaceConfiguration = { isEnabled: boolean; communicatorUrl: string; selectedGroup: string }
export type CreatableInterface = "pcsc" | "webauthn"
export type Group = { name: string; group_id: string }
export type CryptographicInterface = "pcsc" | "cryptoki" | "webauthn"
